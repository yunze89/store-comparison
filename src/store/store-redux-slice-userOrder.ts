import { createSlice, PayloadAction } from '@reduxjs/toolkit';

export interface User {
  id: number;
  name: string;
}

export interface Order {
  id: number;
  item: string;
}

export type Status = 'idle' | 'loading' | 'success' | 'failed' | 'complete'

//initial state
interface UserOrderSliceState {
  user: User | null;
  orders: Order[] | null;
  log: string;
  status: Status

  //rerender test 용도
  //userName: string;
}

const initialState: UserOrderSliceState = {
  user: null,
  orders: null,
  log: '',
  status: 'idle',

  //rerender test 용도
  //userName: '',
};

// Create a slice (replaces reducers and action creators)
export const userOrderSlice = createSlice({
  name: 'userOrder',
  initialState,
  reducers: {
    fetchData: (state) => {
      state.status = 'loading';
    },
    // 컴포넌트에서 사용할 때
    // useEffect(() => {
    //   dispatch(fetchData());
    // }, [dispatch]);

    fetchUserSuccess: (state, action: PayloadAction<User>) => {
      state.user = action.payload;
      state.status = 'success';
    },
    fetchOrdersSuccess: (state, action: PayloadAction<Order[]>) => {
      state.orders = action.payload;
      state.status = 'success';
    },
    logResult: (state, action: PayloadAction<Status>) => {
      state.status = action.payload;
    },

    //rerender test 용도
    // setUserName: (state, action: PayloadAction<string>) => {
    //   state.userName = action.payload
    // }
  },
});

// Export actions generated by createSlice
export const { 
  fetchData, fetchUserSuccess, fetchOrdersSuccess, logResult, 

  //rerender test 용도
  //setUserName
} = userOrderSlice.actions;